#!/bin/bash
# ============================================================================
# Kubernetes Pod and Container Manager with FZF
# ============================================================================
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Find the `build-pod-container-tables` library
find_lib() {
    local paths=(
        "${SCRIPT_DIR}/lib/build-pod-container-tables"
        "${HOME}/.local/lib/kselect/build-pod-container-tables"
        "/usr/local/lib/kselect/build-pod-container-tables"
    )

    for path in "${paths[@]}"; do
        if [[ -f "$path" ]]; then
            echo "$path"
            return 0
        fi
    done

    echo "Error: Cannot find build-pod-container-tables library" >&2
    exit 1
}

LIB_PATH=$(find_lib)

# ============================================================================
# Configuration
# ============================================================================
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly CYAN='\033[0;36m'
readonly GRAY='\033[0;90m'
readonly MAGENTA='\033[0;35m'
readonly WHITE='\033[0;37m'
readonly RESET='\033[0m'

readonly CACHE_REFRESH_INTERVAL=30
readonly LOG_TAIL_LINES=100

# Global state
CONTEXT=""
NAMESPACE=""
POD_NAME=""
BG_REFRESH_PID=""
CACHE_DIR=""

# ============================================================================
# Utility Functions
# ============================================================================
get_current_context() {
    kubectl config current-context
}

get_current_namespace() {
    local namespace
    namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')
    echo "${namespace:-default}"
}

error_exit() {
    echo "Error: $1" >&2
    exit 1
}

colorize() {
    local color="$1"
    local text="$2"
    case "$color" in
    RED) echo -e "${RED}${text}${RESET}" ;;
    GREEN) echo -e "${GREEN}${text}${RESET}" ;;
    YELLOW) echo -e "${YELLOW}${text}${RESET}" ;;
    CYAN) echo -e "${CYAN}${text}${RESET}" ;;
    GRAY) echo -e "${GRAY}${text}${RESET}" ;;
    MAGENTA) echo -e "${MAGENTA}${text}${RESET}" ;;
    WHITE) echo -e "${WHITE}${text}${RESET}" ;;
    *) echo "$text" ;;
    esac
}

check_dependencies() {
    local deps=("$@")
    for dep in "${deps[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || error_exit "$dep is required but not installed"
    done
}

# ============================================================================
# Cache Functions - Simplified
# ============================================================================
get_cache_file() {
    local file_type="$1"
    echo "${CACHE_DIR}/${file_type}"
}

refresh_cache() {
    mkdir -p "$CACHE_DIR"

    local raw_data_file=$(get_cache_file "raw_data.json")
    local temp_file=$(mktemp)

    # Single kubectl call to get all pod data with containers
    if ! kubectl get pods -o json >"$temp_file" 2>&1; then
        echo "Failed to fetch pod data" >&2
        rm -f "$temp_file"
        return 1
    fi

    mv "$temp_file" "$raw_data_file"

    # Process the data into different views
    if ! "$LIB_PATH" -i "$raw_data_file" -o "$CACHE_DIR"; then
        echo "Failed to process pod data" >&2
        return 1
    fi

    return 0
}

# ============================================================================
# Background Refresh
# ============================================================================
background_refresh() {
    while true; do
        sleep "$CACHE_REFRESH_INTERVAL"
        refresh_cache
    done
}

start_background_refresh() {
    background_refresh &
    BG_REFRESH_PID=$!
}

stop_background_refresh() {
    if [[ -n "$BG_REFRESH_PID" ]]; then
        kill "$BG_REFRESH_PID" 2>/dev/null || true
        wait "$BG_REFRESH_PID" 2>/dev/null || true
        BG_REFRESH_PID=""
    fi
}

trap stop_background_refresh EXIT INT TERM

# ============================================================================
# Display Functions
# ============================================================================
list_pods() {
    local pods_file=$(get_cache_file "pods")
    if [[ ! -f "$pods_file" ]]; then
        refresh_cache
    fi
    cat "$pods_file"
}

list_containers() {
    local pod_name="$1"
    local containers_file=$(get_cache_file "containers")
    if [[ ! -f "$containers_file" ]]; then
        refresh_cache
    fi

    # Header
    head -1 "$containers_file" | awk '{print substr($0, index($0, $2))}'
    # Containers
    grep "${pod_name}" "$containers_file" | awk '{print substr($0, index($0, $2))}'
}

# ============================================================================
# Action Functions
# ============================================================================
copy_to_clipboard() {
    local text="$1"
    if command -v pbcopy &>/dev/null; then
        echo "$text" | pbcopy
        echo "Copied '$text' to clipboard"
    elif command -v xclip &>/dev/null; then
        echo "$text" | xclip -selection clipboard
        echo "Copied '$text' to clipboard"
    elif command -v wl-copy &>/dev/null; then
        echo "$text" | wl-copy
        echo "Copied '$text' to clipboard"
    else
        echo "No clipboard utility found (pbcopy, xclip, or wl-copy)"
        return 1
    fi
}

exec_into_pod() {
    local pod="$1"
    echo "====================================================================="
    echo "Executing into pod: $pod"
    if kubectl exec -it "$pod" -- sh -c 'command -v bash >/dev/null && exec bash || exec sh'; then
        return 0
    else
        echo "Failed to exec into pod: $pod"
        echo "Press any key to continue..."
        read -n 1 -s
        return 1
    fi
}

exec_into_container() {
    local container="$1"
    echo "====================================================================="
    echo "Executing into container: $container in pod: $POD_NAME"
    if kubectl exec -it "$POD_NAME" -c "$container" -- sh -c 'command -v bash >/dev/null && exec bash || exec sh'; then
        return 0
    else
        echo "Failed to exec into container: $container in pod: $POD_NAME"
        echo "Press any key to continue..."
        read -n 1 -s
        return 1
    fi
}

delete_pod() {
    local pod="$1"
    echo "====================================================================="
    echo "Deleting pod: $pod"
    kubectl delete pod "$pod"
}

describe_pod() {
    local pod="$1"
    echo "====================================================================="
    echo "Describing pod: $pod"
    kubectl describe pod "$pod" | less
}

describe_container() {
    local container="$1"
    echo "====================================================================="
    echo "Describing container: $container in pod: $POD_NAME"
    kubectl describe pod "$POD_NAME" |
        awk -v container="$container" '
        /^Containers:/ || /^Init Containers:/ { in_containers = 1 }
        in_containers && $0 ~ "^  " container ":$" {
            found = 1
            print $0
            next
        }
        found && /^  [^ ]+:$/ && $0 !~ "^    " {
            found = 0
        }
        found && /^[^ ]/ {
            found = 0
            in_containers = 0
        }
        found { print }
    ' | less
}

highlight_logs() {
    awk -v red="$RED" -v yellow="$YELLOW" -v gray="$GRAY" -v reset="$RESET" '
        {
            printf "%s%s%s ", gray, $1, reset;
            msg = substr($0, index($0, $2));
            gsub(/ERROR/, red "ERROR" reset, msg);
            gsub(/WARN/, yellow "WARN" reset, msg);
            print msg;
        }'
}

view_logs() {
    local container="$1"
    echo "====================================================================="
    echo "Viewing logs container: $container in pod: $POD_NAME"

    local log_fifo="${CACHE_DIR}/logs/${POD_NAME}/${container}.log"
    mkdir -p "$(dirname "$log_fifo")"
    rm -f "$log_fifo"
    mkfifo "$log_fifo"

    kubectl logs "$POD_NAME" -c "$container" --timestamps --follow | highlight_logs >"$log_fifo" 2>/dev/null &
    local pid=$!

    less <"$log_fifo"

    kill "$pid" 2>/dev/null || true
    rm "$log_fifo"
}

# ============================================================================
# UI Functions
# ============================================================================
build_context_header() {
    echo -e "âŽˆ $CONTEXT"
}

build_actions_header() {
    local actions=("$@")
    local header_parts=()
    for action in "${actions[@]}"; do
        case "$action" in
        "enter:containers") header_parts+=("$(colorize MAGENTA "ENTER") to list containers") ;;
        "enter:logs") header_parts+=("$(colorize MAGENTA "ENTER") to view logs") ;;
        "exec") header_parts+=("$(colorize MAGENTA "CTRL-E") to exec") ;;
        "describe") header_parts+=("$(colorize MAGENTA "CTRL-D") to describe") ;;
        "delete") header_parts+=("$(colorize MAGENTA "CTRL-K") to delete") ;;
        "copy") header_parts+=("$(colorize MAGENTA "CTRL-Y") to copy name") ;;
        "refresh") header_parts+=("$(colorize MAGENTA "CTRL-R") to refresh") ;;
        "up") header_parts+=("$(colorize MAGENTA "ESC") to go up") ;;
        "quit") header_parts+=("$(colorize MAGENTA "CTRL-Q") to quit") ;;
        esac
    done
    printf "%s" "${header_parts[0]}"
    printf ", %s" "${header_parts[@]:1}"
    echo
}

build_pod_prompt() {
    echo "$(colorize CYAN "$NAMESPACE")> "
}

build_container_prompt() {
    echo "$(colorize CYAN "$NAMESPACE")/$(colorize YELLOW "$POD_NAME")> "
}

manage_pods() {
    local initial_query="${1:-}"
    start_background_refresh

    while true; do
        local context_header actions_header full_header prompt
        context_header=$(build_context_header)
        actions_header=$(build_actions_header "enter:containers" "exec" "describe" "delete" "copy" "refresh" "quit")
        full_header="${context_header}"$'\n'"${actions_header}"
        prompt=$(build_pod_prompt)

        local fzf_output
        fzf_output=$(list_pods | fzf \
            --no-multi \
            --ansi \
            --tiebreak=begin,index \
            --prompt="$prompt" \
            --height=100% \
            --header="$full_header" \
            --header-lines=1 \
            --query="$initial_query" \
            --bind="ctrl-e:execute(exec_into_pod {1})+reload(list_pods)" \
            --bind="ctrl-d:execute(describe_pod {1})+reload(list_pods)" \
            --bind="ctrl-k:execute(delete_pod {1} && refresh_cache)+reload(list_pods)" \
            --bind="ctrl-y:execute(copy_to_clipboard {1})+reload(list_pods)" \
            --bind="ctrl-r:reload(refresh_cache && list_pods)" \
            --bind="ctrl-q:abort" \
            --print-query --expect=enter 2>/dev/null) || {
            stop_background_refresh
            exit 0
        }

        local query=$(echo "$fzf_output" | sed -n '1p')
        local key=$(echo "$fzf_output" | sed -n '2p')
        local selection=$(echo "$fzf_output" | sed -n '3p')

        if [[ -n "$selection" && "$key" == "enter" ]]; then
            local pod_name=$(echo "$selection" | awk '{print $1}')
            local returned_query
            returned_query=$(manage_containers "$pod_name" "")
            if [[ $? -eq 1 ]]; then
                stop_background_refresh
                exit 0
            fi
            initial_query="$query"
        else
            initial_query=""
        fi
    done

    stop_background_refresh
}

manage_containers() {
    local pod_name="$1"
    local initial_query="${2:-}"
    POD_NAME="$pod_name"

    while true; do
        local context_header actions_header full_header prompt
        context_header=$(build_context_header)
        actions_header=$(build_actions_header "enter:logs" "exec" "describe" "up" "quit")
        full_header="${context_header}"$'\n'"${actions_header}"
        prompt=$(build_container_prompt)

        local fzf_output
        fzf_output=$(list_containers "$pod_name" | fzf \
            --no-multi \
            --ansi \
            --tiebreak=begin,index \
            --prompt="$prompt" \
            --height=100% \
            --header="$full_header" \
            --header-lines=1 \
            --query="$initial_query" \
            --bind="ctrl-e:execute(exec_into_container {1})+reload(list_containers $pod_name)" \
            --bind="ctrl-d:execute(describe_container {1})+reload(list_containers $pod_name)" \
            --bind="ctrl-y:execute(copy_to_clipboard {1})+reload(list_containers $pod_name)" \
            --bind="ctrl-r:reload(refresh_cache && list_containers $pod_name)" \
            --bind="ctrl-q:abort" \
            --print-query --expect=enter,esc,ctrl-c 2>/dev/null) || {
            return 1
        }

        local query=$(echo "$fzf_output" | sed -n '1p')
        local key=$(echo "$fzf_output" | sed -n '2p')
        local selection=$(echo "$fzf_output" | sed -n '3p')

        if [[ "$key" == "esc" || "$key" == "ctrl-c" ]]; then
            echo "$query"
            return 0
        fi

        if [[ -n "$selection" && "$key" == "enter" ]]; then
            local container_name=$(echo "$selection" | awk '{print $1}')
            view_logs "$container_name"
            initial_query="$query"
        else
            initial_query=""
        fi
    done
}

# ============================================================================
# Export
# ============================================================================
# Export functions for fzf subshells
export -f colorize get_cache_file
export -f list_pods list_containers refresh_cache
export -f copy_to_clipboard exec_into_pod exec_into_container
export -f delete_pod describe_pod describe_container view_logs highlight_logs

# Export constants
export RED GREEN YELLOW CYAN GRAY MAGENTA WHITE RESET
export LIB_PATH CACHE_DIR CONTEXT NAMESPACE POD_NAME

# ============================================================================
# Main
# ============================================================================
main() {
    check_dependencies "fzf" "kubectl" "jq"

    CONTEXT=$(get_current_context) || error_exit "Failed to get current context"
    NAMESPACE=$(get_current_namespace)

    CACHE_DIR="/tmp/kselect/${CONTEXT}/${NAMESPACE}"

    manage_pods
}

main "$@"
