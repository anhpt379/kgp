#!/bin/bash
# ============================================================================
# Kubernetes Pod and Container Manager with FZF
# ============================================================================
set -euo pipefail

# ============================================================================
# Configuration
# ============================================================================
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly CYAN='\033[0;36m'
readonly GRAY='\033[0;90m'
readonly MAGENTA='\033[0;35m'
readonly WHITE='\033[0;37m'
readonly RESET='\033[0m'

readonly CACHE_DIR="/tmp/kgp"
readonly CACHE_REFRESH_INTERVAL=30
readonly LOG_TAIL_LINES=100

# Global state
CONTEXT=""
NAMESPACE=""
POD_NAME=""
BG_REFRESH_PID=""

# Cache files
PODS_CACHE=""
CONTAINERS_CACHE=""
RAW_DATA_CACHE=""

# ============================================================================
# Utility Functions
# ============================================================================
get_current_context() {
    kubectl config current-context
}

get_current_namespace() {
    local namespace
    namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')
    echo "${namespace:-default}"
}

error_exit() {
    echo "Error: $1" >&2
    exit 1
}

colorize() {
    local color="$1"
    local text="$2"
    case "$color" in
    RED) echo -e "${RED}${text}${RESET}" ;;
    GREEN) echo -e "${GREEN}${text}${RESET}" ;;
    YELLOW) echo -e "${YELLOW}${text}${RESET}" ;;
    CYAN) echo -e "${CYAN}${text}${RESET}" ;;
    GRAY) echo -e "${GRAY}${text}${RESET}" ;;
    MAGENTA) echo -e "${MAGENTA}${text}${RESET}" ;;
    WHITE) echo -e "${WHITE}${text}${RESET}" ;;
    *) echo "$text" ;;
    esac
}

check_dependencies() {
    local deps=("$@")
    for dep in "${deps[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || error_exit "$dep is required but not installed"
    done
}

# ============================================================================
# Data Fetching
# ============================================================================
fetch_data() {
    local temp_file=$(mktemp)

    # Single kubectl call to get all pod data with containers
    if ! kubectl get pods -o json >"$temp_file" 2>&1; then
        echo "Failed to fetch pod data" >&2
        rm -f "$temp_file"
        return 1
    fi

    mv "$temp_file" "$RAW_DATA_CACHE"

    # Process the data into different views
    python3 generate_cache_files.py -i "$RAW_DATA_CACHE" -o "$CACHE_BASE"
}

# ============================================================================
# Cache Management
# ============================================================================
refresh_cache() {
    fetch_data 2>/dev/null || echo "Failed to refresh cache" >&2
}

background_refresh() {
    while true; do
        sleep "$CACHE_REFRESH_INTERVAL"
        refresh_cache
    done
}

start_background_refresh() {
    background_refresh &
    BG_REFRESH_PID=$!
}

stop_background_refresh() {
    if [[ -n "$BG_REFRESH_PID" ]]; then
        kill "$BG_REFRESH_PID" 2>/dev/null || true
        wait "$BG_REFRESH_PID" 2>/dev/null || true
        BG_REFRESH_PID=""
    fi
}

trap stop_background_refresh EXIT INT TERM

# ============================================================================
# Display Functions
# ============================================================================
list_pods() {
    if [[ ! -f "$PODS_CACHE" ]]; then
        refresh_cache
    fi

    cat "$PODS_CACHE"
}

list_containers() {
    local pod_name="$1"
    if [[ ! -f "$CONTAINERS_CACHE" ]]; then
        refresh_cache
    fi

    # Header
    head -1 "$CONTAINERS_CACHE" | awk '{print substr($0, index($0, $2))}'

    # Containers
    grep "${pod_name}" "$CONTAINERS_CACHE" | awk '{print substr($0, index($0, $2))}'
}

# ============================================================================
# Action Functions
# ============================================================================
copy_to_clipboard() {
    local text="$1"
    if command -v pbcopy &>/dev/null; then
        echo "$text" | pbcopy
        echo "Copied '$text' to clipboard"
    elif command -v xclip &>/dev/null; then
        echo "$text" | xclip -selection clipboard
        echo "Copied '$text' to clipboard"
    elif command -v wl-copy &>/dev/null; then
        echo "$text" | wl-copy
        echo "Copied '$text' to clipboard"
    else
        echo "No clipboard utility found (pbcopy, xclip, or wl-copy)"
        return 1
    fi
}

exec_into_pod() {
    local pod="$1"
    echo "====================================================================="
    echo "Executing into pod: $pod"
    echo "Command: kubectl exec -it $pod -- bash"
    if kubectl exec -it "$pod" -- bash || kubectl exec -it "$pod" -- sh; then
        # Success - no need to pause
        return 0
    else
        # Failed - pause to show error
        echo "Failed to exec into pod: $pod"
        echo "Press any key to continue..."
        read -n 1 -s
        return 1
    fi
}

exec_into_container() {
    local container="$1"
    echo "====================================================================="
    echo "Executing into container: $container in pod: $POD_NAME"
    echo "Command: kubectl exec -it $POD_NAME -c $container -- bash"
    if kubectl exec -it "$POD_NAME" -c "$container" -- bash || kubectl exec -it "$POD_NAME" -c "$container" -- sh; then
        # Success - no need to pause
        return 0
    else
        # Failed - pause to show error
        echo "Failed to exec into container: $container in pod: $POD_NAME"
        echo "Press any key to continue..."
        read -n 1 -s
        return 1
    fi
}

describe_pod() {
    local pod="$1"
    echo "Describing pod: $pod"
    kubectl describe pod "$pod" | less
}

describe_container() {
    local container="$1"
    echo "Describing container: $container in pod: $POD_NAME"

    # Get the kubectl describe output and extract the specific container section
    kubectl describe pod "$POD_NAME" |
        awk -v container="$container" '
        # Start capturing when we find either containers section
        /^Containers:/ || /^Init Containers:/ { in_containers = 1 }

        # Found the target container (2 spaces + container name + colon)
        in_containers && $0 ~ "^  " container ":$" {
            found = 1
            print $0
            next
        }

        # Stop capturing when we hit another container at same level
        found && /^  [^ ]+:$/ && $0 !~ "^    " {
            found = 0
        }

        # Stop capturing when we hit a new top-level section
        found && /^[^ ]/ {
            found = 0
            in_containers = 0
        }

        # Print lines while in the target container section
        found { print }
    ' | less
}

view_logs() {
    local container="$1"
    local fifo="/tmp/view_logs_fifo_$$"
    mkfifo "$fifo" || { echo "Failed to create FIFO"; return 1; }

    local kubectl_args=(logs "$POD_NAME" -c "$container" --tail="$LOG_TAIL_LINES" --timestamps --follow)

    {
        echo "================================================================================"
        echo "Pod: $POD_NAME | Container: $container"
        echo "================================================================================"
        echo "CONTROLS:"
        echo "  F (Shift+F) - Toggle follow mode    /pattern - Search forward"
        echo "  Ctrl+C      - Exit follow mode      ?pattern - Search backward"
        echo "  q           - Quit                  n        - Next search result"
        echo "  g           - Go to beginning       N        - Previous search result"
        echo "  G           - Go to end             h        - Show help"
        echo "================================================================================"

        if ! kubectl "${kubectl_args[@]}"; then
            kubectl "${kubectl_args[@]}" --previous
        fi
    } | awk -v red="$RED" -v yellow="$YELLOW" -v gray="$GRAY" -v reset="$RESET" '
        {
            printf "%s%s%s ", gray, $1, reset;
            msg = substr($0, index($0, $2));
            gsub(/ERROR/, red "ERROR" reset, msg);
            gsub(/WARN/, yellow "WARN" reset, msg);
            print msg;
        }
    ' > "$fifo" &

    local kubectl_pid=$!

    less "$fifo"

    kill "$kubectl_pid" 2>/dev/null
    wait "$kubectl_pid" 2>/dev/null
    rm -f "$fifo"

    echo "Returning to container view..."
}
# ============================================================================
# UI Functions
# ============================================================================
# TODO: Have a better/prettier context & action header
build_context_header() {
    echo -e "Context: $CONTEXT"
}

build_actions_header() {
    local actions=("$@")
    local header_parts=()

    for action in "${actions[@]}"; do
        case "$action" in
        "enter:containers") header_parts+=("$(colorize MAGENTA "ENTER") containers") ;;
        "enter:logs") header_parts+=("$(colorize MAGENTA "ENTER") logs") ;;
        "exec") header_parts+=("$(colorize MAGENTA "CTRL-E") exec") ;;
        "describe") header_parts+=("$(colorize MAGENTA "CTRL-D") describe") ;;
        "copy") header_parts+=("$(colorize MAGENTA "CTRL-Y") copy") ;;
        "refresh") header_parts+=("$(colorize MAGENTA "CTRL-R") refresh") ;;
        "back") header_parts+=("$(colorize MAGENTA "ESC") back") ;;
        esac
    done

    # Join with " | "
    local IFS=" | "
    echo -e "${header_parts[*]}"
}

build_pod_prompt() {
    echo "$(colorize CYAN "$NAMESPACE")> "
}

build_container_prompt() {
    echo "$(colorize CYAN "$NAMESPACE")/$(colorize YELLOW "$POD_NAME")> "
}

manage_pods() {
    start_background_refresh
    while true; do
        local context_header actions_header full_header prompt
        context_header=$(build_context_header)
        actions_header=$(build_actions_header "enter:containers" "exec" "describe" "copy" "refresh")
        full_header="${context_header}"$'\n'"${actions_header}"
        prompt=$(build_pod_prompt)

        local fzf_output
        # Remove +abort from ctrl-e binding
        fzf_output=$(list_pods | fzf \
            --no-multi \
            --ansi \
            --tiebreak=begin,index \
            --prompt="$prompt" \
            --height=100% \
            --header="$full_header" \
            --header-lines=1 \
            --bind="ctrl-e:execute(exec_into_pod {1})" \
            --bind="ctrl-d:execute(describe_pod {1})" \
            --bind="ctrl-y:execute(copy_to_clipboard {1})" \
            --bind="ctrl-r:reload(list_pods)" \
            --print-query --expect=enter 2>/dev/null) || {
            break
        }

        # Parse fzf output
        local query=$(echo "$fzf_output" | sed -n '1p')
        local key=$(echo "$fzf_output" | sed -n '2p')
        local selection=$(echo "$fzf_output" | sed -n '3p')

        # Handle selection
        if [[ -n "$selection" && "$key" == "enter" ]]; then
            local pod_name=$(echo "$selection" | awk '{print $1}')
            manage_containers "$pod_name"
        fi
    done
    stop_background_refresh
}

manage_containers() {
    local pod_name="$1"
    POD_NAME="$pod_name"
    
    while true; do
        local context_header actions_header full_header prompt
        context_header=$(build_context_header)
        actions_header=$(build_actions_header "enter:logs" "exec" "describe" "copy" "refresh" "back")
        full_header="${context_header}"$'\n'"${actions_header}"
        prompt=$(build_container_prompt)

        local fzf_output
        # Remove +abort from ctrl-e binding
        fzf_output=$(list_containers "$pod_name" | fzf \
            --no-multi \
            --ansi \
            --tiebreak=begin,index \
            --prompt="$prompt" \
            --height=100% \
            --header="$full_header" \
            --header-lines=1 \
            --bind="ctrl-e:execute(exec_into_container {1})" \
            --bind="ctrl-d:execute(describe_container {1})" \
            --bind="ctrl-y:execute(copy_to_clipboard {1})" \
            --bind="ctrl-r:reload(list_containers $pod_name)" \
            --print-query --expect=enter,esc 2>/dev/null) || {
            break
        }

        # Parse fzf output
        local query=$(echo "$fzf_output" | sed -n '1p')
        local key=$(echo "$fzf_output" | sed -n '2p')
        local selection=$(echo "$fzf_output" | sed -n '3p')

        # Handle exit conditions
        if [[ "$key" == "esc" ]]; then
            break
        fi

        # Handle selection
        if [[ -n "$selection" && "$key" == "enter" ]]; then
            local container_name=$(echo "$selection" | awk '{print $1}')
            view_logs "$container_name"
        fi
    done
}
# ============================================================================
# Export
# ============================================================================
# Export functions and variables for fzf subshells
export -f colorize
export -f list_pods list_containers refresh_cache fetch_data
export -f copy_to_clipboard exec_into_pod exec_into_container
export -f describe_pod describe_container view_logs

# Export color constants
export RED GREEN YELLOW CYAN GRAY MAGENTA WHITE RESET

# Export cache file paths and other variables
export CACHE_DIR CONTEXT NAMESPACE POD_NAME
export CACHE_BASE PODS_CACHE CONTAINERS_CACHE RAW_DATA_CACHE

# ============================================================================
# Main
# ============================================================================
main() {
    check_dependencies "fzf" "kubectl" "jq"

    CONTEXT=$(get_current_context) || error_exit "Failed to get current context"
    NAMESPACE=$(get_current_namespace)

    CACHE_BASE="${CACHE_DIR}/${CONTEXT}/${NAMESPACE}"
    mkdir -p "$CACHE_BASE"

    RAW_DATA_CACHE="${CACHE_BASE}/raw_data.json"
    PODS_CACHE="${CACHE_BASE}/pods"
    CONTAINERS_CACHE="${CACHE_BASE}/containers"

    manage_pods
}

main "$@"
